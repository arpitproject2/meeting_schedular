Meeting Scheduler Database Design Documentation
Author: Arpit (GitHub: arpitproject2)
Date: 30/8/24
Project Repository: Meeting Scheduler GitHub Repository

1. Introduction
The purpose of this document is to outline the database design for the Meeting Scheduler project. This design is intended to support the core functionalities required by the system, such as scheduling meetings, detecting collisions, managing rooms, and handling multiple participants. PostgreSQL has been chosen as the database management system due to its robust support for relational data and complex queries.

2. Database Schema Overview
The database schema is structured to handle the following entities:

Users: Individuals who can create and participate in meetings.
Rooms: Meeting rooms where meetings can be held.
Meetings: Events that take place at a specific time, involving one or more participants in a room.
Participants: The relationship between users and meetings, indicating who is attending each meeting.
3. Tables and Schema
3.1 Users Table
Purpose: Stores information about users, such as their name and email.

Schema:

CREATE TABLE users ( id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE NOT NULL );

Fields:

id: Unique identifier for each user (Primary Key).
name: Name of the user.
email: Email address of the user (must be unique).
Indexes:

PRIMARY KEY (id)
UNIQUE (email)
3.2 Rooms Table
Purpose: Stores details about meeting rooms, including their name and capacity.

Schema:

CREATE TABLE rooms ( id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, capacity INT NOT NULL );

Fields:

id: Unique identifier for each room (Primary Key).
name: Name of the room.
capacity: Maximum number of people the room can accommodate.
Indexes:

PRIMARY KEY (id)
3.3 Meetings Table
Purpose: Stores details of each scheduled meeting, including the room, time, and creator.

Schema:

CREATE TABLE meetings ( id SERIAL PRIMARY KEY, title VARCHAR(255) NOT NULL, room_id INT REFERENCES rooms(id), start_time TIMESTAMP NOT NULL, end_time TIMESTAMP NOT NULL, created_by INT REFERENCES users(id) );

Fields:

id: Unique identifier for each meeting (Primary Key).
title: Title of the meeting.
room_id: Foreign key referencing the rooms table.
start_time: Start time of the meeting.
end_time: End time of the meeting.
created_by: Foreign key referencing the users table (who created the meeting).
Indexes:

PRIMARY KEY (id)
FOREIGN KEY (room_id) REFERENCES rooms(id)
FOREIGN KEY (created_by) REFERENCES users(id)
Constraints:

CHECK (start_time < end_time): Ensures the start time is before the end time.
3.4 Participants Table
Purpose: Manages the many-to-many relationship between meetings and users, indicating who is participating in each meeting.

Schema:

CREATE TABLE participants ( meeting_id INT REFERENCES meetings(id) ON DELETE CASCADE, user_id INT REFERENCES users(id), PRIMARY KEY (meeting_id, user_id) );

Fields:

meeting_id: Foreign key referencing the meetings table.
user_id: Foreign key referencing the users table.
Indexes:

PRIMARY KEY (meeting_id, user_id): Composite primary key to ensure uniqueness.
Constraints:

FOREIGN KEY (meeting_id) REFERENCES meetings(id) ON DELETE CASCADE: Deletes participant records when the associated meeting is deleted.
FOREIGN KEY (user_id) REFERENCES users(id): Ensures valid users are added as participants.
4. Relationships and Keys
Primary Keys: Each table has a primary key (id) to uniquely identify records.
Foreign Keys: Relationships between tables are enforced using foreign keys. For example, meetings.room_id references rooms.id, and participants.user_id references users.id.
Indexes: Unique and composite indexes are used to optimize queries, such as ensuring unique email addresses in the users table and quickly retrieving participants for a meeting.
5. Example Queries
Insert a New User

INSERT INTO users (name, email) VALUES ('John Doe', 'john.doe@example.com');

Insert a New Room

INSERT INTO rooms (name, capacity) VALUES ('Conference Room A', 10);

Insert a New Meeting

INSERT INTO meetings (title, room_id, start_time, end_time, created_by) VALUES ('Project Kickoff', 1, '2024-09-01 10:00:00', '2024-09-01 11:00:00', 1);

Add Participants to a Meeting

   INTO participants (meeting_id, user_id) VALUES (1, 2), (1, 3);

  Check for Room Availability

  SELECT COUNT(*) FROM meetings WHERE room_id = 1 AND ( (start_time < '2024-09-01 11:00:00' AND end_time > '2024-09-01 10:00:00') );

6. Optimization and Considerations
Indexes: Proper indexing ensures efficient retrieval of records, especially when checking for collisions or listing participants.
Normalization: The database is designed to be normalized, reducing redundancy and improving data integrity.
Scalability: The schema is designed to accommodate additional features, such as recurring meetings or notifications, with minimal changes.
